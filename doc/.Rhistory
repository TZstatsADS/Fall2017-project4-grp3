users <- sample.data.set[,1]
movies <- colnames(sample.data.set[,-1])
users
movies
user_sim
sim.rank.model(sample.data.set)
user_sim
# returns the corresponding row or column for a user or movie.
get_movies_num <- function(user){
u_i <- match(user, users)
return(graph[u_i,-1])
}
get_users_num <- function(movie){
m_j <- match(movie, movies)
return(graph[,m_j+1])
}
# return the users or movies with a non zero
get_movies <- function(user){
series = get_movies_num(user)
return(movies[which(series!=0)])
}
get_users <- function(movie){
series = get_users_num(movie)
return(users[which(series!=0)])
}
user_simrank <- function(u1, u2, C) {
if (u1 == u2){
return(1)
} else {
pre = C / (sum(get_movies_num(u1)) * sum(get_movies_num(u2)))
post = 0
for (m_i in get_movies(u1)){
for (m_j in get_movies(u2)){
i <- match(m_i, movies)
j <- match(m_j, movies)
post <- post + movie_sim[i, j]
}
}
return(pre*post)
}
}
movie_simrank <- function(m1, m2, C) {
if (m1 == m2){
return(1)
} else {
pre = C / (sum(get_users_num(m1)) * sum(get_users_num(m2)))
post = 0
for (u_i in get_users(m1)){
for (u_j in get_users(m2)){
i <- match(u_i, users)
j <- match(u_j, users)
post <- post + user_sim[i, j]
}
}
return(pre*post)
}
}
simrank <- function(C=0.8, times = 1, calc_user = T, calc_movie = F, data){
for (run in 1:times){
if(calc_user){
for (ui in users){
for (uj in users){
i = match(ui, users)
j = match(uj, users)
user_sim[i, j] <<- user_simrank(ui, uj, C)
}
}
}
if(calc_movie){
for (mi in movies){
for (mj in movies){
i = match(mi, movies)
j = match(mj, movies)
movie_sim[i, j] <<- movie_simrank(mi, mj, C)
}
}
}
}
}
sim.rank.model <- function(data) {
data[is.na(data)] <- 0
data[,-1][data[,-1] < 5] <- 0
data[,-1][data[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
simrank(0.8, 1, calc_user, calc_movie, data)
}
# simrank updates global variables user_sim and movie_sim so we can call them here
if(model.sim.rank){
sample.data.set <- movie.data.train[1:20, 1:20]
user_sim <- diag(dim(sample.data.set)[1])
movie_sim <- diag(dim(sample.data.set)[2])
users <- sample.data.set[,1]
movies <- colnames(sample.data.set[,-1])
sim.rank.model(sample.data.set)
if(calc_user){
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='usersim.csv', row.names = FALSE)
}
if(calc_movie){
colnames(movie_sim) <- movies
movie_sim <- cbind(movies, movie_sim)
write.csv(movie_sim, file='moviesim.csv', row.names = FALSE)
}
}
head(user_sim)
user_sim
load("~/ADS/fall2017-project4-grrp3/data/movie_data_train_wide.Rdata")
# returns the corresponding row or column for a user or movie.
get_movies_num <- function(user){
u_i <- match(user, users)
return(graph[u_i,-1])
}
get_users_num <- function(movie){
m_j <- match(movie, movies)
return(graph[,m_j+1])
}
# return the users or movies with a non zero
get_movies <- function(user){
series = get_movies_num(user)
return(movies[which(series!=0)])
}
get_users <- function(movie){
series = get_users_num(movie)
return(users[which(series!=0)])
}
user_simrank <- function(u1, u2, C) {
if (u1 == u2){
return(1)
} else {
pre = C / (sum(get_movies_num(u1)) * sum(get_movies_num(u2)))
post = 0
for (m_i in get_movies(u1)){
for (m_j in get_movies(u2)){
i <- match(m_i, movies)
j <- match(m_j, movies)
post <- post + movie_sim[i, j]
}
}
return(pre*post)
}
}
movie_simrank <- function(m1, m2, C) {
if (m1 == m2){
return(1)
} else {
pre = C / (sum(get_users_num(m1)) * sum(get_users_num(m2)))
post = 0
for (u_i in get_users(m1)){
for (u_j in get_users(m2)){
i <- match(u_i, users)
j <- match(u_j, users)
post <- post + user_sim[i, j]
}
}
return(pre*post)
}
}
simrank <- function(C=0.8, times = 1){
for (run in 1:times){
if(calc_user){
for (ui in users){
for (uj in users){
i = match(ui, users)
j = match(uj, users)
user_sim[i, j] <<- user_simrank(ui, uj, C)
}
}
}
if(calc_movie){
for (mi in movies){
for (mj in movies){
i = match(mi, movies)
j = match(mj, movies)
movie_sim[i, j] <<- movie_simrank(mi, mj, C)
}
}
}
}
}
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
if(calc_user){
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='usersim.csv', row.names = FALSE)
}
if(calc_movie){
colnames(movie_sim) <- movies
movie_sim <- cbind(movies, movie_sim)
write.csv(movie_sim, file='moviesim.csv', row.names = FALSE)
}
user_sim
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
if(calc_user){
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='usersim.csv', row.names = FALSE)
}
if(calc_movie){
colnames(movie_sim) <- movies
movie_sim <- cbind(movies, movie_sim)
write.csv(movie_sim, file='moviesim.csv', row.names = FALSE)
}
}
#Read raw data files
read.movie.data = F
read.ms.data = F
#Reshape data to wide format
reshape.movie = F
reshape.ms = F
#Load Rdata
load.movie.data = T
load.ms.data = T
#Implementation algorythims
model.clustering = T
cross.validate.model.clustering = F
model.sim.rank <- T
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
if(calc_user){
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='usersim.csv', row.names = FALSE)
}
if(calc_movie){
colnames(movie_sim) <- movies
movie_sim <- cbind(movies, movie_sim)
write.csv(movie_sim, file='moviesim.csv', row.names = FALSE)
}
}
user_sim
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='rmark.csv', row.names = FALSE)
}
#Read raw data files
read.movie.data = F
read.ms.data = F
#Reshape data to wide format
reshape.movie = F
reshape.ms = F
#Load Rdata
load.movie.data = T
load.ms.data = T
#Implementation algorythims
model.clustering = T
cross.validate.model.clustering = F
model.sim.rank <- T
if (read.movie.data){
#Read dataset from directory
movie.data.train <- read.csv("../data/movie_data_train.csv")
movie.data.test <- read.csv("../data/movie_data_test.csv")
movie.data.train <- movie.data.train[,-1]
movie.data.test <- movie.data.test[,-1]
#Check dataset information
paste("Data Dimension:", dim(movie.data.train)[1], "x", dim(movie.data.train)[2])
paste("Number of Unique Movies:",length(unique(movie.data.train[,2])))
paste("Number of Unique Users:",length(unique(movie.data.train[,3])))
paste("Number of 0 ratings:", sum(movie.data.train[,4] == 1))
}
load("~/ADS/fall2017-project4-grrp3/data/movie_data_train_wide.Rdata")
# returns the corresponding row or column for a user or movie.
get_movies_num <- function(user){
u_i <- match(user, users)
return(graph[u_i,-1])
}
get_users_num <- function(movie){
m_j <- match(movie, movies)
return(graph[,m_j+1])
}
# return the users or movies with a non zero
get_movies <- function(user){
series = get_movies_num(user)
return(movies[which(series!=0)])
}
get_users <- function(movie){
series = get_users_num(movie)
return(users[which(series!=0)])
}
user_simrank <- function(u1, u2, C) {
if (u1 == u2){
return(1)
} else {
pre = C / (sum(get_movies_num(u1)) * sum(get_movies_num(u2)))
post = 0
for (m_i in get_movies(u1)){
for (m_j in get_movies(u2)){
i <- match(m_i, movies)
j <- match(m_j, movies)
post <- post + movie_sim[i, j]
}
}
return(pre*post)
}
}
movie_simrank <- function(m1, m2, C) {
if (m1 == m2){
return(1)
} else {
pre = C / (sum(get_users_num(m1)) * sum(get_users_num(m2)))
post = 0
for (u_i in get_users(m1)){
for (u_j in get_users(m2)){
i <- match(u_i, users)
j <- match(u_j, users)
post <- post + user_sim[i, j]
}
}
return(pre*post)
}
}
simrank <- function(C=0.8, times = 1, calc_user = T, calc_movie = F, data){
for (run in 1:times){
if(calc_user){
for (ui in users){
for (uj in users){
i = match(ui, users)
j = match(uj, users)
user_sim[i, j] <<- user_simrank(ui, uj, C)
}
}
}
if(calc_movie){
for (mi in movies){
for (mj in movies){
i = match(mi, movies)
j = match(mj, movies)
movie_sim[i, j] <<- movie_simrank(mi, mj, C)
}
}
}
}
}
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='rmark.csv', row.names = FALSE)
}
#Read raw data files
read.movie.data = F
read.ms.data = F
#Reshape data to wide format
reshape.movie = F
reshape.ms = F
#Load Rdata
load.movie.data = T
load.ms.data = T
#Implementation algorythims
model.clustering = T
cross.validate.model.clustering = F
model.sim.rank <- T
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='rmark.csv', row.names = FALSE)
}
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
if(model.sim.rank){
graph <- movie.data.train[1:40, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
}
user_sim
setwd("~/ADS/fall2017-project4-grrp3/doc")
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='../output/usersim.csv', row.names = FALSE)
if(model.sim.rank){
graph <- movie.data.train[, 1:40]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
}
colnames(user_sim) <- users
user_sim <- cbind(users, user_sim)
write.csv(user_sim, file='../output/usersim.csv', row.names = FALSE)
if(model.sim.rank){
graph <- movie.data.train[1:1000, 1:1000]
graph[is.na(graph)] <- 0
graph[,-1][graph[,-1] < 5] <- 0
graph[,-1][graph[,-1] >= 5] <- 1
# set similarity matrices to be calculated
calc_user = T
calc_movie = F
# initialize the similarity matrices
user_sim <- diag(dim(graph)[1])
movie_sim <- diag(dim(graph)[2])
# create list of users and movies
users <- graph[,1]
movies <- colnames(graph[,-1])
simrank(0.8, 1)
}
